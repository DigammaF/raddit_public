
from __future__ import annotations
from typing import Generic, Protocol, Iterable, TypeAlias, Optional, TypeVar
from hashlib import sha256
from datetime import datetime
from enum import Enum
from timer import Timer
from raddit_email import MailSender

def hash(text: str) -> str:
	return sha256(text.encode("utf-8")).hexdigest()

Key: TypeAlias = str

class SubradditPostPolicyAbc(Enum): pass

class LocatorProtocol(Protocol):

	main: LocatorProtocol
	database: DatabaseProtocol
	timers: dict[str, Timer]
	mail_sender: MailSender

	def exit(self): ...
	def start(self): ...
	def bind_main(self): ...

class KeyedProtocol(Protocol):

	def get_key(self) -> Key: ...

class DisplayableProtocol(Protocol):

	def get_title(self) -> str: ...
	def get_text(self) -> str: ...

class NotificationProtocol(DisplayableProtocol, KeyedProtocol, Protocol):

	def get_read(self) -> bool: ...
	def set_read(self, v: bool): ...
	def get_target(self) -> UserProtocol: ...
	def get_link(self) -> str: ...

class EmailVerificationProtocol(KeyedProtocol, Protocol):

	def get_target(self) -> UserProtocol: ...
	def get_timestamp(self) -> datetime: ...
	def delete(self): ...

class UserProtocol(KeyedProtocol, Protocol):

	def get_name(self) -> str: ...
	def get_email(self) -> str: ...
	def is_email_verified(self) -> bool: ...
	def set_email_verified(self, v: bool): ...
	def get_password_hash(self) -> str: ...
	def get_posts(self) -> Iterable[Key]: ...
	def get_private_messages_whitelist(self) -> set[Key]: ...
	def add_pmw(self, name: str): ...
	def rem_pmw(self, name: str): ...
	def get_private_messages(self) -> Iterable[Key]: ...
	def get_notifications(self) -> Iterable[Key]: ...
	def get_owned_subraddits(self) -> Iterable[Key]: ...
	def own_subraddit(self, key: Key) -> bool: ...
	def set_password_hash(self, password_hash: str): ...
	def shadow_delete(self): ...
	def delete(self): ...
	def add_private_message(self, key: Key): ...
	def add_owned_subraddit(self, key: Key): ...
	def get_unread_notifications_count(self) -> int: ...
	def is_deleted(self) -> bool: ...

class PostProtocol(DisplayableProtocol, KeyedProtocol, Protocol):

	def add_child(self, child: PostProtocol): ...
	def get_children(self) -> Iterable[Key]: ...
	def get_children_count(self) -> int: ...
	def get_timestamp(self) -> datetime: ...
	def get_parent_key(self) -> Optional[Key]: ...
	def get_author(self) -> Optional[UserProtocol]: ...
	def subscribe(self, user: UserProtocol): ...
	def unsubscribe(self, user: UserProtocol): ...
	def is_subscribed(self, user: UserProtocol) -> bool: ...
	def get_subscribers(self) -> Iterable[Key]: ...
	def get_subscribers_count(self) -> int: ...

PostPolicyT = TypeVar("PostPolicyT", bound=SubradditPostPolicyAbc)

class SubradditProtocol(KeyedProtocol, Protocol, Generic[PostPolicyT]):

	def add_post(self, post: PostProtocol): ...
	def get_posts(self) -> Iterable[Key]: ...
	def get_name(self) -> str: ...
	def get_owner(self) -> Optional[UserProtocol]: ...
	def is_whitelisted(self, user: UserProtocol) -> bool: ...
	def is_blacklisted(self, user: UserProtocol) -> bool: ...
	def get_post_policy(self) -> PostPolicyT: ...
	def set_post_policy(self, p: PostPolicyT): ...
	def get_whitelist(self) -> Iterable[Key]: ...
	def get_blacklist(self) -> Iterable[Key]: ...
	def add_whitelist(self, user: UserProtocol): ...
	def rem_whitelist(self, user: UserProtocol): ...
	def add_blacklist(self, user: UserProtocol): ...
	def rem_blacklist(self, user: UserProtocol): ...
	def comply_with_post_policy(self, user: UserProtocol) -> bool: ...
	def get_description(self) -> str: ...
	def set_description(self, text: str): ...
	def clean_post_policy(self): ...

class PrivateMessageProtocol(DisplayableProtocol, KeyedProtocol, Protocol):

	def get_author(self) -> Optional[Key]: ...
	def get_read(self) -> bool: ...
	def set_read(self, v: bool): ...
	def get_timestamp(self) -> datetime: ...

class DatabaseProtocol(Protocol):

	def get_post(self, key: Key) -> Optional[PostProtocol]: ...
	def set_post(self, post: PostProtocol): ...
	def get_subraddit(self, key: Key) -> Optional[SubradditProtocol]: ...
	def set_subraddit(self, subraddit: SubradditProtocol): ...
	def get_user(self, name: str) -> Optional[UserProtocol]: ...
	def set_user(self, user: UserProtocol): ...
	def rem_user(self, name: str): ...
	def shadow_rem_user(self, name: str): ...
	def is_email_used(self, email: str) -> bool: ...
	def get_email_verification(self, key: Key) -> Optional[EmailVerificationProtocol]: ...
	def set_email_verification(self, email_verification: EmailVerificationProtocol): ...
	def rem_email_verification(self, key: Key): ...
	def get_notification(self, key: Key) -> Optional[NotificationProtocol]: ...
	def set_notification(self, notification: NotificationProtocol): ...
	def get_private_message(self, key: Key) -> Optional[PrivateMessageProtocol]: ...
	def set_private_message(self, private_message: PrivateMessageProtocol): ...
	def get_new_key(self) -> Key: ...
	def start(self): ...
	def exit(self): ...

	def subraddit_name_taken(self, name: str) -> bool: ...
	def search_subraddit(self, name: str) -> Optional[tuple[str, Key]]: ...

	def clean_email_verifications(self): ...

	def post_update_children(self, post: PostProtocol): ...
	def post_update_subscribers(self, post: PostProtocol): ...

	def user_update_email_verified(self, user: UserProtocol): ...
	def user_update_private_messages(self, user: UserProtocol): ...
	def user_update_password_hash(self, user: UserProtocol): ...
	def user_update_pmw(self, user: UserProtocol): ...
	def user_update_owned_subraddits(self, user: UserProtocol): ...
	def user_get_unread_notification_count(self, user: UserProtocol) -> int: ...
	def user_get_notifications(self, user: UserProtocol) -> Iterable[Key]: ...

	def subraddit_update_post_policy(self, subraddit: SubradditProtocol): ...
	def subraddit_update_whitelist(self, subraddit: SubradditProtocol): ...
	def subraddit_update_blacklist(self, subraddit: SubradditProtocol): ...
	def subraddit_update_posts(self, subraddit: SubradditProtocol): ...
	def subraddit_update_description(self, subraddit: SubradditProtocol): ...

	def notification_update_read(self, notification: NotificationProtocol): ...

	def private_message_update_read(self, private_message: PrivateMessageProtocol): ...
